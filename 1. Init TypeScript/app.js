"use strict";
//Tipos primitivos 
var isDone = false;
//Tipo numerico
var decimal = 6;
var hex = 0xf00d;
var binary = 10;
var octal = 484;
// Tipo String
var color = "blue";
// se pudende utilizar template
var fullName = "Ronald Castillo";
var age = 20;
var sentence = "Hello, my name is \n" + fullName + ", I'll be " + age + " years old";
//String literal type
//solo podran contener el valor asignado 
var literalString = 'hello';
literalString = "Bye";
//Array
var list = [1, 2, 3];
var list2 = [1, 2, 3];
// Tuplas
var x;
x = ["hello", 10];
// Enum
//sin valor 
var Color;
(function (Color) {
    Color[Color["Red"] = 0] = "Red";
    Color[Color["Green"] = 1] = "Green";
    Color[Color["Blue"] = 2] = "Blue";
})(Color || (Color = {}));
;
var c = Color.Green;
var Color2;
(function (Color2) {
    Color2[Color2["Red"] = 1] = "Red";
    Color2[Color2["Green"] = 2] = "Green";
    Color2[Color2["Blue"] = 3] = "Blue";
})(Color2 || (Color2 = {}));
//con el nombre de los atributos
var colorName = Color2[2];
//Type alias
var FooIdBrand;
(function (FooIdBrand) {
    FooIdBrand[FooIdBrand["Apple"] = 1] = "Apple";
})(FooIdBrand || (FooIdBrand = {}));
var food;
food = FooIdBrand[1];
//Any: pude almacenar cualquier tipo de datos 
var notSure = 4;
notSure = "Pepe";
var notSureArray = ["Ronald", true, false];
notSureArray[3] = "samuel";
// Void es un dato de no retorno
function warnUser() {
    alert("hola");
}
//Funciones en TypeScript
function verificatedType(value, padding) {
    if (typeof padding === "number") {
        return Array(padding + 1).join(" ") + value;
    }
    if (typeof padding === "string") {
        return Array(padding.length + 1).join(" ") + value;
    }
    throw new Error("Expected String or number, got '" + padding + "' ");
}
// console.log(verificatedType("hello",true))
//Parametros opcionales
function processEntity(e) {
    console.log(e || "nada");
}
// console.log(processEntity(1))
//Genérica
function echo(arg) {
    console.log(arg);
}
function implementInterface(arg) {
    console.log(arg.length);
    return arg;
}
// console.log(implementInterface({length:8, name:"Ronald", lastName:"Castillo"}))
//Aserción de tipos (Assert)
var Bird = /** @class */ (function () {
    function Bird() {
    }
    Bird.prototype.fly = function () {
        console.log("Pajaro");
    };
    Bird.prototype.layEggs = function () {
        console.log("Pone huevos");
    };
    return Bird;
}());
var Fish = /** @class */ (function () {
    function Fish() {
    }
    Fish.prototype.swim = function () {
        console.log("Pez");
    };
    Fish.prototype.layEggs = function () {
        console.log("Pone huevos");
    };
    return Fish;
}());
function getAnimal() {
    var a = new Bird();
    return a;
}
var pet = getAnimal();
console.log(getAnimal());
pet.layEggs();
//Asercion
if (pet.swim) {
    pet.swim();
}
else if (pet.fly) {
    pet.fly();
    console.log(pet.swim);
}
//Promice 
//# sourceMappingURL=data:application/json;base64,